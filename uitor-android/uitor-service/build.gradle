apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply from: "$rootDir/build-android.gradle"

android {
    sourceSets {
        main.java.srcDirs += file("src/extractors")
        //having core extracted for potential bigger in future modularisation
        main.java.srcDirs += file("src/main/core")
    }
    testOptions.unitTests.includeAndroidResources = true
}

dependencies {
    compileOnly "com.google.code.gson:gson:${gson}"
    compileOnly "com.fasterxml.jackson.core:jackson-databind:${jackson}"

    implementation "androidx.annotation:annotation:${androidXAnnotations}"
    //necessary for service
    implementation "androidx.core:core:${androidXCore}"
    implementation "androidx.fragment:fragment:${androidXFragments}"
    implementation "io.ktor:ktor-server-jetty:$ktor"
    //debug logging
    //implementation("ch.qos.logback:logback-classic:1.2.3")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"

    compileOnly project(":uitor-service-groovy")
    compileOnly "androidx.recyclerview:recyclerview:${androidX}"
    compileOnly "androidx.cardview:cardview:${androidX}"
    compileOnly "androidx.gridlayout:gridlayout:${androidX}"
    compileOnly "androidx.percentlayout:percentlayout:${androidX}"
    compileOnly "com.google.android.material:material:${androidXMaterial}"
    compileOnly "androidx.viewpager2:viewpager2:${viewPager2}"
    compileOnly "androidx.coordinatorlayout:coordinatorlayout:${coordinatorLayout}"
    compileOnly "androidx.constraintlayout:constraintlayout:${constraintlayout}"
    compileOnly "androidx.navigation:navigation-fragment:${androidXNavigation}"

    testImplementation "junit:junit:$junit"
    testImplementation project(":uitor-service-groovy")
    testImplementation "androidx.appcompat:appcompat:$androidXAppCompat"
    //androidTest only, not needed for the lib itself
    testImplementation "com.google.code.gson:gson:${gson}"
    testImplementation "commons-io:commons-io:${commonsIo}"
    testImplementation "org.robolectric:robolectric:${robolectric}"
    testImplementation "org.mockito:mockito-core:${mockito}"
    androidTestImplementation "org.mockito:mockito-core:${mockito}"
}


task createStructureClasses {
    def structure = "${project.projectDir}/src/main/assets/structure.json"
    doLast {
        def targetPackage = 'com.scurab.android.uitor.extract2'
        com.scurab.utior.buildsrc.Script.generateClasses(targetPackage, structure, "${project.projectDir}/src/extractors")
    }
    inputs.files(structure)
    outputs.dir("${project.projectDir}/src/extractors")
    group = "build"
}
preBuild.dependsOn createStructureClasses

task cleanStructureClasses {
    doLast {
        def file = new File("${project.projectDir}/src/extractors")
        println("Delete" + file.deleteDir())
        file.mkdirs()
    }
    group = "build"
}
clean.dependsOn cleanStructureClasses


afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = 'anuitor'
                artifact tasks.bundleReleaseAar
                artifact tasks.sourcesJar
                //todo jdocs
            }
        }
    }
}